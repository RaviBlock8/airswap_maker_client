"use strict";
/*
  Copyright 2020 Swap Holdings Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var utils_1 = require("ethers/utils");
var constants_1 = require("@airswap/constants");
var utils_2 = require("@airswap/utils");
var ERC20_1 = require("./ERC20");
var DelegateContract = __importStar(require("@airswap/delegate/build/contracts/Delegate.json"));
var DelegateInterface = new ethers_1.ethers.utils.Interface(JSON.stringify(DelegateContract.abi));
var Delegate = /** @class */ (function () {
    function Delegate(address, chainId, walletOrProvider) {
        if (chainId === void 0) { chainId = constants_1.chainIds.RINKEBY; }
        this.chainId = chainId;
        this.address = address;
        this.tradeWallet = '';
        this.contract = new ethers_1.ethers.Contract(address, DelegateInterface, walletOrProvider ||
            ethers_1.ethers.getDefaultProvider(constants_1.chainNames[chainId].toLowerCase()));
    }
    Delegate.prototype.getWallet = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.tradeWallet === '')) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.contract.tradeWallet()];
                    case 1:
                        _a.tradeWallet = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, this.tradeWallet];
                }
            });
        });
    };
    Delegate.prototype.getMaxQuote = function (signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, senderAmount, signerAmount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.contract.getMaxQuote(senderToken, signerToken)];
                    case 1:
                        _a = _b.sent(), senderAmount = _a.senderAmount, signerAmount = _a.signerAmount;
                        return [2 /*return*/, this.getQuotedOrMaxAvailable(senderToken, senderAmount, signerToken, signerAmount)];
                }
            });
        });
    };
    Delegate.prototype.getSignerSideQuote = function (senderAmount, senderToken, signerToken) {
        return __awaiter(this, void 0, void 0, function () {
            var signerAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contract.getSignerSideQuote(senderAmount, senderToken, signerToken)];
                    case 1:
                        signerAmount = _a.sent();
                        return [2 /*return*/, this.getQuotedOrMaxAvailable(senderToken, senderAmount, signerToken, signerAmount)];
                }
            });
        });
    };
    Delegate.prototype.getSenderSideQuote = function (signerAmount, signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            var senderAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contract.getSenderSideQuote(signerAmount, signerToken, senderToken)];
                    case 1:
                        senderAmount = _a.sent();
                        return [2 /*return*/, this.getQuotedOrMaxAvailable(senderToken, senderAmount, signerToken, signerAmount)];
                }
            });
        });
    };
    Delegate.prototype.provideOrder = function (order, wallet) {
        return __awaiter(this, void 0, void 0, function () {
            var contract, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contract = this.contract;
                        if (!this.contract.signer) {
                            if (wallet === undefined) {
                                throw new Error('Wallet must be provided');
                            }
                            else {
                                contract = new ethers_1.ethers.Contract(this.address, DelegateInterface, wallet);
                            }
                        }
                        return [4 /*yield*/, contract.provideOrder(order)];
                    case 1:
                        tx = _a.sent();
                        return [4 /*yield*/, tx.wait(constants_1.MIN_CONFIRMATIONS)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, tx.hash];
                }
            });
        });
    };
    Delegate.prototype.getQuotedOrMaxAvailable = function (senderToken, senderAmount, signerToken, signerAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var balance, finalSenderAmount, finalSignerAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new ERC20_1.ERC20(senderToken, this.chainId).balanceOf(this.address)];
                    case 1:
                        balance = _a.sent();
                        finalSenderAmount = utils_1.bigNumberify(senderAmount);
                        finalSignerAmount = utils_1.bigNumberify(signerAmount);
                        if (balance.lt(senderAmount)) {
                            finalSenderAmount = balance;
                            finalSignerAmount = utils_1.bigNumberify(senderAmount)
                                .div(signerAmount)
                                .mul(balance);
                        }
                        if (finalSenderAmount.isZero() || finalSignerAmount.isZero()) {
                            throw {
                                code: -33601,
                                message: 'Not quoting for requested amount or token pair',
                            };
                        }
                        return [2 /*return*/, {
                                timestamp: utils_2.getTimestamp(),
                                protocol: constants_1.protocols.DELEGATE,
                                locator: this.address,
                                sender: {
                                    kind: constants_1.tokenKinds.ERC20,
                                    token: senderToken,
                                    amount: finalSenderAmount.toString(),
                                },
                                signer: {
                                    kind: constants_1.tokenKinds.ERC20,
                                    token: signerToken,
                                    amount: finalSignerAmount.toString(),
                                },
                            }];
                }
            });
        });
    };
    return Delegate;
}());
exports.Delegate = Delegate;
//# sourceMappingURL=Delegate.js.map