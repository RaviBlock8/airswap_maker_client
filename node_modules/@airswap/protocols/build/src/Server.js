"use strict";
/*
  Copyright 2020 Swap Holdings Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var jayson = __importStar(require("jayson"));
var constants_1 = require("@airswap/constants");
var utils_1 = require("@airswap/utils");
var Server = /** @class */ (function () {
    function Server(locator) {
        var locatorUrl = utils_1.parseUrl(locator);
        var options = {
            protocol: locatorUrl.protocol,
            hostname: locatorUrl.hostname,
            port: locatorUrl.port,
            timeout: constants_1.REQUEST_TIMEOUT,
        };
        if (options.protocol === 'https:') {
            this.client = jayson.Client.https(options);
        }
        else {
            this.client = jayson.Client.http(options);
        }
    }
    Server.prototype.getMaxQuote = function (signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.generateRequest('getMaxQuote', {
                            signerToken: signerToken,
                            senderToken: senderToken,
                        }, resolve, reject);
                    })];
            });
        });
    };
    Server.prototype.getSignerSideQuote = function (senderAmount, signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.generateRequest('getSignerSideQuote', {
                            senderAmount: senderAmount.toString(),
                            signerToken: signerToken,
                            senderToken: senderToken,
                        }, resolve, reject);
                    })];
            });
        });
    };
    Server.prototype.getSenderSideQuote = function (signerAmount, signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.generateRequest('getSenderSideQuote', {
                            signerAmount: signerAmount.toString(),
                            signerToken: signerToken,
                            senderToken: senderToken,
                        }, resolve, reject);
                    })];
            });
        });
    };
    Server.prototype.getSignerSideOrder = function (senderAmount, signerToken, senderToken, senderWallet) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.generateRequest('getSignerSideOrder', {
                            senderAmount: senderAmount.toString(),
                            signerToken: signerToken,
                            senderToken: senderToken,
                            senderWallet: senderWallet,
                        }, resolve, reject);
                    })];
            });
        });
    };
    Server.prototype.getSenderSideOrder = function (signerAmount, signerToken, senderToken, senderWallet) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.generateRequest('getSenderSideOrder', {
                            signerAmount: signerAmount.toString(),
                            signerToken: signerToken,
                            senderToken: senderToken,
                            senderWallet: senderWallet,
                        }, resolve, reject);
                    })];
            });
        });
    };
    Server.prototype.compare = function (params, result) {
        var errors = [];
        var flat = utils_1.flattenObject(result);
        for (var param in params) {
            if (param in flat &&
                flat[param].toLowerCase() !== params[param].toLowerCase()) {
                errors.push(param);
            }
        }
        return errors;
    };
    Server.prototype.generateRequest = function (method, params, resolve, reject) {
        var _this = this;
        return this.client.request(method, params, function (connectionError, serverError, result) {
            if (connectionError) {
                reject({ code: -1, message: connectionError.message });
            }
            else if (serverError) {
                reject(serverError);
            }
            else {
                var errors = _this.compare(params, result);
                if (errors.length) {
                    reject({
                        code: -1,
                        message: "Server response differs from request params: " + errors,
                    });
                }
                else {
                    if (method.indexOf('Quote') !== -1 && !utils_1.isValidQuote(result)) {
                        reject({
                            code: -1,
                            message: "Server response is not a valid quote: " + JSON.stringify(result),
                        });
                    }
                    else if (method.indexOf('Order') !== -1 &&
                        !utils_1.isValidOrder(result)) {
                        reject({
                            code: -1,
                            message: "Server response is not a valid order: " + JSON.stringify(result),
                        });
                    }
                    else {
                        resolve(result);
                    }
                }
            }
        });
    };
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=Server.js.map