"use strict";
/*
  Copyright 2020 Swap Holdings Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var constants_1 = require("@airswap/constants");
var IndexerContract = __importStar(require("@airswap/indexer/build/contracts/Indexer.json"));
var indexerDeploys = __importStar(require("@airswap/indexer/deploys.json"));
var IndexerInterface = new ethers_1.ethers.utils.Interface(JSON.stringify(IndexerContract.abi));
var Indexer = /** @class */ (function () {
    function Indexer(chainId, walletOrProvider) {
        if (chainId === void 0) { chainId = constants_1.chainIds.RINKEBY; }
        this.chainId = chainId;
        this.contract = new ethers_1.ethers.Contract(indexerDeploys[chainId], IndexerInterface, walletOrProvider ||
            ethers_1.ethers.getDefaultProvider(constants_1.chainNames[chainId].toLowerCase()));
    }
    Indexer.getAddress = function (chainId) {
        if (chainId === void 0) { chainId = constants_1.chainIds.RINKEBY; }
        if (chainId in indexerDeploys) {
            return indexerDeploys[chainId];
        }
        throw new Error("Indexer deploy not found for chainId " + chainId);
    };
    Indexer.prototype.getLocators = function (signerToken, senderToken, protocol, limit, cursor) {
        if (protocol === void 0) { protocol = constants_1.protocols.SERVER; }
        if (limit === void 0) { limit = 10; }
        if (cursor === void 0) { cursor = constants_1.INDEX_HEAD; }
        return __awaiter(this, void 0, void 0, function () {
            var result, locators, _i, _a, locator;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.contract.getLocators(signerToken, senderToken, protocol, cursor, limit)];
                    case 1:
                        result = _b.sent();
                        locators = [];
                        for (_i = 0, _a = result.locators; _i < _a.length; _i++) {
                            locator = _a[_i];
                            try {
                                switch (protocol) {
                                    case constants_1.protocols.SERVER:
                                        locators.push(ethers_1.ethers.utils.parseBytes32String(locator));
                                        break;
                                    case constants_1.protocols.DELEGATE:
                                        locators.push(ethers_1.ethers.utils.getAddress(locator.slice(0, 42)));
                                        break;
                                    default:
                                        locators.push(locator);
                                }
                            }
                            catch (e) {
                                continue;
                            }
                        }
                        return [2 /*return*/, {
                                locators: locators,
                                scores: result.scores,
                                nextCursor: result.nextCursor,
                            }];
                }
            });
        });
    };
    return Indexer;
}());
exports.Indexer = Indexer;
//# sourceMappingURL=Indexer.js.map