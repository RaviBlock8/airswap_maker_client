declare type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];
declare type Party = {
    kind: string;
    token: string;
    amount?: string;
    id?: string;
};
export declare type QuoteParty = RequireAtLeastOne<Party, 'amount' | 'id'>;
export declare type OrderParty = QuoteParty & {
    wallet: string;
};
export declare type Quote = {
    timestamp?: string;
    protocol?: string;
    locator?: string;
    signer: QuoteParty;
    sender: QuoteParty;
};
export declare type UnsignedOrder = {
    nonce: string;
    expiry: string;
    signer: OrderParty;
    sender: OrderParty;
    affiliate: OrderParty;
};
export declare type Signature = {
    version: string;
    signatory: string;
    validator: string;
    v: string;
    r: string;
    s: string;
};
export declare type Order = UnsignedOrder & {
    signature: Signature;
};
export declare type Token = {
    address: string;
    symbol: string;
    decimals: number;
};
export declare type LocatorResult = {
    locators: Array<string>;
    scores: Array<string>;
    nextCursor: string;
};
export declare const EIP712: {
    EIP712Domain: {
        name: string;
        type: string;
    }[];
    Order: {
        name: string;
        type: string;
    }[];
    Party: {
        name: string;
        type: string;
    }[];
};
export declare const emptyQuoteParty: QuoteParty;
export declare const emptyOrderParty: OrderParty;
export declare const emptySignature: Signature;
export {};
