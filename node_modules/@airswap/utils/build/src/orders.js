"use strict";
/*
  Copyright 2020 Swap Holdings Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethUtil = __importStar(require("ethereumjs-util"));
var ethers_1 = require("ethers");
var constants_1 = require("@airswap/constants");
var types_1 = require("@airswap/types");
var hashes_1 = require("./hashes");
var __1 = require("..");
function createOrder(_a) {
    var _b = _a.expiry, expiry = _b === void 0 ? Math.round(Date.now() / 1000 + constants_1.SECONDS_IN_DAY).toString() : _b, _c = _a.nonce, nonce = _c === void 0 ? Date.now() : _c, _d = _a.signer, signer = _d === void 0 ? {} : _d, _e = _a.sender, sender = _e === void 0 ? {} : _e, _f = _a.affiliate, affiliate = _f === void 0 ? {} : _f;
    return __1.lowerCaseAddresses({
        expiry: String(expiry),
        nonce: String(nonce),
        signer: __assign(__assign({}, types_1.emptyOrderParty), signer),
        sender: __assign(__assign({}, types_1.emptyOrderParty), sender),
        affiliate: __assign(__assign({}, types_1.emptyOrderParty), affiliate),
    });
}
exports.createOrder = createOrder;
function createOrderForQuote(quote, signerWallet, senderWallet) {
    return createOrder({
        signer: {
            kind: constants_1.tokenKinds.ERC20,
            token: quote.signer.token,
            amount: quote.signer.amount,
            wallet: signerWallet,
        },
        sender: {
            kind: constants_1.tokenKinds.ERC20,
            token: quote.sender.token,
            amount: quote.sender.amount,
            wallet: senderWallet,
        },
    });
}
exports.createOrderForQuote = createOrderForQuote;
function createSignature(order, wallet, swapContract) {
    return __awaiter(this, void 0, void 0, function () {
        var orderHash, signedMsg, sig, r, s, v, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    orderHash = hashes_1.getOrderHash(order, swapContract);
                    return [4 /*yield*/, wallet.signMessage(ethers_1.ethers.utils.arrayify(orderHash))];
                case 1:
                    signedMsg = _b.sent();
                    sig = ethers_1.ethers.utils.splitSignature(signedMsg);
                    r = sig.r, s = sig.s, v = sig.v;
                    _a = {};
                    return [4 /*yield*/, wallet.getAddress()];
                case 2: return [2 /*return*/, (_a.signatory = (_b.sent()).toLowerCase(),
                        _a.validator = swapContract,
                        _a.version = constants_1.signatureTypes.PERSONAL_SIGN,
                        _a.v = String(v),
                        _a.r = r,
                        _a.s = s,
                        _a)];
            }
        });
    });
}
exports.createSignature = createSignature;
function signOrder(order, wallet, swapContract) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign({}, order)];
                    _b = {};
                    return [4 /*yield*/, createSignature(order, wallet, swapContract)];
                case 1: return [2 /*return*/, __assign.apply(void 0, _a.concat([(_b.signature = _c.sent(), _b)]))];
            }
        });
    });
}
exports.signOrder = signOrder;
function hasValidSignature(order) {
    var signature = order['signature'];
    var orderHash = hashes_1.getOrderHash(order, signature['validator']);
    if (signature.version === '0x45') {
        var prefix = Buffer.from('\x19Ethereum Signed Message:\n');
        orderHash = ethUtil.keccak256(Buffer.concat([prefix, Buffer.from(String(orderHash.length)), orderHash]));
    }
    var signingPubKey;
    try {
        signingPubKey = ethUtil.ecrecover(orderHash, signature['v'], signature['r'], signature['s']);
    }
    catch (e) {
        return false;
    }
    var signingAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(signingPubKey));
    return signingAddress.toLowerCase() === signature['signatory'];
}
exports.hasValidSignature = hasValidSignature;
function isValidOrder(order) {
    if (order &&
        'nonce' in order &&
        'expiry' in order &&
        'signer' in order &&
        'sender' in order &&
        'affiliate' in order &&
        'signature' in order &&
        'wallet' in order['signer'] &&
        'wallet' in order['sender'] &&
        'wallet' in order['affiliate'] &&
        'token' in order['signer'] &&
        'token' in order['sender'] &&
        'token' in order['affiliate'] &&
        'amount' in order['signer'] &&
        'amount' in order['sender'] &&
        'amount' in order['affiliate'] &&
        'id' in order['signer'] &&
        'id' in order['sender'] &&
        'id' in order['affiliate'] &&
        'signatory' in order['signature'] &&
        'validator' in order['signature'] &&
        'r' in order['signature'] &&
        's' in order['signature'] &&
        'v' in order['signature']) {
        return hasValidSignature(order);
    }
    return false;
}
exports.isValidOrder = isValidOrder;
//# sourceMappingURL=orders.js.map