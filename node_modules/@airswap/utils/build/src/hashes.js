"use strict";
/*
  Copyright 2020 Swap Holdings Ltd.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethUtil = __importStar(require("ethereumjs-util"));
var ethAbi = __importStar(require("ethereumjs-abi"));
var constants_1 = require("@airswap/constants");
var types_1 = require("@airswap/types");
function stringify(type) {
    var str = type + "(";
    var keys = Object.keys(types_1.EIP712[type]);
    for (var i = 0; i < keys.length; i++) {
        str += types_1.EIP712[type][i].type + " " + types_1.EIP712[type][i].name;
        if (i !== keys.length - 1) {
            str += ',';
        }
    }
    return str + ")";
}
exports.EIP712_DOMAIN_TYPEHASH = ethUtil.keccak256(stringify('EIP712Domain'));
exports.ORDER_TYPEHASH = ethUtil.keccak256(stringify('Order') + stringify('Party'));
exports.PARTY_TYPEHASH = ethUtil.keccak256(stringify('Party'));
function hashParty(party) {
    return ethUtil.keccak256(ethAbi.rawEncode(['bytes32', 'bytes4', 'address', 'address', 'uint256', 'uint256'], [
        exports.PARTY_TYPEHASH,
        party.kind,
        party.wallet,
        party.token,
        party.amount,
        party.id,
    ]));
}
exports.hashParty = hashParty;
function hashOrder(order) {
    return ethUtil.keccak256(ethAbi.rawEncode(['bytes32', 'uint256', 'uint256', 'bytes32', 'bytes32', 'bytes32'], [
        exports.ORDER_TYPEHASH,
        order.nonce,
        order.expiry,
        hashParty(order.signer),
        hashParty(order.sender),
        hashParty(order.affiliate),
    ]));
}
exports.hashOrder = hashOrder;
function hashDomain(swapContract) {
    return ethUtil.keccak256(ethAbi.rawEncode(['bytes32', 'bytes32', 'bytes32', 'address'], [
        exports.EIP712_DOMAIN_TYPEHASH,
        ethUtil.keccak256(constants_1.DOMAIN_NAME),
        ethUtil.keccak256(constants_1.DOMAIN_VERSION),
        swapContract,
    ]));
}
exports.hashDomain = hashDomain;
function getOrderHash(order, swapContract) {
    return ethUtil.keccak256(Buffer.concat([
        Buffer.from('1901', 'hex'),
        hashDomain(swapContract),
        hashOrder(order),
    ]));
}
exports.getOrderHash = getOrderHash;
//# sourceMappingURL=hashes.js.map